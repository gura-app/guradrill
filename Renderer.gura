#!/usr/bin/env gura
import(re)
import(cairo)
import(utils)

borderThicknessDict = %{
	`thin => .1
	`medium => .5
	`thick => 1
}

Extent = struct(x_advance:number, height:number)

Item = class {
	public {type, text, children, width, widthUnit, align, border}
	__init__(type:symbol) = {
		this.type = type		// `Root, `Block, `Text, `Operator, `Bracket, `Rational
		this.text = nil			// valid for `Text and `Operator
		this.children = []		// valid for `Root and `Block
		this.width = nil		// valid for `Block
		this.widthUnit = nil	// valid for `Block
		this.align = nil		// valid for `Block
		this.border = nil		// valid for `Block
	}
	AddChild(item:Item) = this.children.add(item)
	GetLastChild() = if (!this.children.isempty()) {this.children.last()}
	EraseLastChild() = this.children.erase(-1)
	Draw(cr:cairo.context, x:number, y:number, drawFlag:boolean => true) = {
		if (this.type == `Root) {
			DrawItems(cr, x, y, this.children, drawFlag)
		} elsif (this.type == `Block) {
			width = this.width * GetWidthEm(cr)
			ext = ExtentItems(cr, this.children)
			DrawItems(cr, x + (width - ext.x_advance) / 2, y, this.children, drawFlag)
			DrawBorder(cr, x, y, width, this.border, drawFlag)
		} elsif (this.type == `Text) {
			DrawText(cr, x, y, this.text, drawFlag)
		} elsif (this.type == `Operator) {
			x0 = x
			widthEm = GetWidthEm(cr)
			x += widthEm * .4
			ext = DrawSymbol(cr, x, y, this.text, drawFlag)
			x += ext.x_advance
			x += widthEm * .4
			Extent(x - x0, 0)
		} elsif (this.type == `Bracket) {
			x0 = x
			widthEm = GetWidthEm(cr)
			ext = DrawSymbol(cr, x, y, '(', drawFlag)
			x += ext.x_advance
			ext = DrawItems(cr, x, y, this.children, drawFlag)
			x += ext.x_advance
			x += widthEm * .15
			ext = DrawSymbol(cr, x, y, ')', drawFlag)
			x += ext.x_advance
			Extent(x - x0, 0)
		} elsif (this.type == `Rational) {
			
		}
	}
	Print(indentLevel:number => 0):void = {
		if (this.type == `Root) {
			printf('%*s%s:\n', indentLevel * 2, '', this.type)
		} elsif (this.type == `Block) {
			printf('%*s%s: width=%s,align=%s,border=%s\n',
				   indentLevel * 2, '', this.type, this.width, this.align, this.border)
		} elsif (this.type == `Rational) {
			printf('%*s%s:\n', indentLevel * 2, '', this.type)
		} else {
			printf('%*s%s: "%s"\n', indentLevel * 2, '', this.type, this.text)
		}
		this.children:*Print(indentLevel + 1)
	}
}

ItemRoot = class(Item) {
	__init__() = {|`Root|}
}

ItemBlock = class(Item) {
	__init__() = {|`Block|}
}

ItemText = class(Item) {
	__init__(text:string) = {|`Text| this.text = text}
}

ItemOperator = class(Item) {
	__init__(text:string) = {|`Operator| this.text = text}
}

ItemBracket = class(Item) {
	__init__() = {|`Bracket|}
}

ItemRational = class(Item) {
	__init__() = {|`Rational|}
}

GetWidthEm(cr:cairo.context) = {
	cr.text_extents('m').width
}

DrawBorder(cr:cairo.context, x:number, y:number, width:number,
		   border:symbol:nil, drawFlag:boolean => true) = {
	fontExt = cr.font_extents()
	if (border && drawFlag) {
		cr.rectangle(x, y - fontExt.ascent * (1 + .2), width, fontExt.ascent * (1 + .2 + .2))
		cr.set_line_width(borderThicknessDict[border])
		cr.stroke()
	}
	Extent(width, 0)
}

DrawText(cr:cairo.context, x:number, y:number, text:string, drawFlag:boolean => true) = {
	textExt = cr.text_extents(text)
	if (drawFlag) {
		cr.move_to(x, y)
		cr.show_text(text)
	}
	Extent(textExt.x_advance, 0)
}

DrawSymbol(cr:cairo.context, x:number, y:number, text:string, drawFlag:boolean => true) = {
	text = if (text == '*') {'\u00d7'} elsif (text == '/') {'\u00f7'} else {text}
	textExt = cr.text_extents(text)
	if (drawFlag) {
		fontExt = cr.font_extents()
		cr.move_to(x, y - textExt.y_bearing - (fontExt.ascent + textExt.height) / 2)
		cr.show_text(text)
	}
	Extent(textExt.x_advance, 0)
}

DrawItems(cr:cairo.context, x:number, y:number,
		  items[]:Parser.Item, drawFlag:boolean => true) = {
	x0 = x
	items.each {|item|
		ext = item.Draw(cr, x, y, drawFlag)
		x += ext.x_advance
	}
	Extent(x - x0, 0)
}

ExtentItem(cr:cairo.context, item:Parser.Item) = {
	item.Draw(cr, 0, 0, false)
}

ExtentItems(cr:cairo.context, items[]:Parser.Item) = {
	DrawItems(cr, 0, 0, items, false)
}

AddChildItem(itemStack[]:Item, item:Item):void = {
	itemParent = itemStack.last()
	itemParent.AddChild(item)
	if (itemParent.type == `Rational && itemParent.children.len() >= 2) {
		itemStack.erase(-1)
	}
}

Parse(content:string) = {
	itemStack = []
	itemStack.add(ItemRoot())
	text = ''
	stat = `Normal
	content.each {|ch|
		utils.pushback {|pb|
			if (stat == `Normal) {
				if (ch == '{') {
					item = ItemBlock()
					AddChildItem(itemStack, item)
					itemStack.add(item)
				} elsif (ch == '}') {
					itemParent = itemStack.last()
					if (!text.isempty()) {
						AddChildItem(itemStack, ItemText(text))
						itemParent = itemStack.last()
						text = ''
					}
					if (itemParent.type != `Block) {
						raise(error.SyntaxError, 'unbalanced bracket')
					}
					stat = `BlockAttrPre
				} elsif (ch == '(') {
					item = ItemBracket()
					AddChildItem(itemStack, item)
					itemStack.add(item)
				} elsif (ch == ')') {
					itemParent = itemStack.last()
					if (!text.isempty()) {
						AddChildItem(itemStack, ItemText(text))
						itemParent = itemStack.last()
						text = ''
					}
					if (itemParent.type != `Bracket) {
						raise(error.SyntacError, 'unbalanced bracket')
					}
					itemStack.erase(-1)
					text = ''
				} elsif (ch == '%') {
					itemParent = itemStack.last()
					if (!text.isempty()) {
						AddChildItem(itemStack, ItemText(text))
						itemParent = itemStack.last()
						text = ''
					}
					if (itemLast = itemParent.GetLastChild()) {
						itemParent.EraseLastChild()
						item = ItemRational()
						AddChildItem(itemStack, item)
						item.AddChild(itemLast)
						itemStack.add(item)
					}
				} elsif (ch in ['+', '-', '*', '/', '^', '=', '<', '>']) {
					if (!text.isempty()) {
						AddChildItem(itemStack, ItemText(text))
						text = ''
					}
					AddChildItem(itemStack, ItemOperator(ch))
				} elsif (ch in [' ', '\t']) {
					if (!text.isempty()) {
						AddChildItem(itemStack, ItemText(text))
						text = ''
					}
				} else {
					text += ch
				}
			} elsif (stat == `BlockAttrPre) {
				if (ch == '[') {
					stat = `BlockAttr
				} else {
					itemStack.erase(-1)
					pb.Pushback()
					stat = `Normal
				}
			} elsif (stat == `BlockAttr) {
			if (ch == ']') {
				itemParent = itemStack.last()
				text.split(',') {|field|
					field = field.strip()
					if (m = field.match(r'([\d\.]+)([a-z]+)')) {
						itemParent.width = m[1].tonumber()
						itemParent.widthUnit = m[2]
					} elsif (m = field.match(r'border=([a-z]+)')) {
						if (m[1] == 'thin') {
							itemParent.border = `thin
						} elsif (m[1] == 'medium') {
							itemParent.border = `medium
						} elsif (m[1] == 'thick') {
							itemParent.border = `thick
						}
					} elsif (field == 'border') {
						itemParent.border = `medium
					} elsif (field == 'center') {
						itemParent.align = `center
					} elsif (field == 'left') {
						itemParent.align = `left
					} elsif (field == 'right') {
						itemParent.align = `right
					} else {
						// invalid attribute
					}
				}
				itemStack.erase(-1)
				text = ''
				stat = `Normal
				} else {
					text += ch
				}
			}
		}
	}
	!text.isempty() && AddChildItem(itemStack, ItemText(text))
	itemStack.first()
}

Render(cr:cairo.context, x:number, y:number, content:string) = {
	Parse(content).Draw(cr, x, y)
}

if (__name__ == '__main__') {
	//str = 'x^2+3x^3+4=0'
	//str = '{1000}[5em,center] + {123}[5em,center] = {}[5em,border=thin]'
	//str = '123+345-1111'
	str = '1 % 3 + {x + 3} % {3x + 2} + 1 % {2 % 3}'
	//str = '1 % {2 % 3}'
	//str = '{1 % 2} % {2 % 3}'
	Parse(str).Print()
}
