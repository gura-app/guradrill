#!/usr/bin/env gura
import(re)
import(cairo)
import(utils)

//------------------------------------------------------------------------------
// Extent
//------------------------------------------------------------------------------
Extent = struct(x_advance:number, ascent:number, descent:number)

//------------------------------------------------------------------------------
// Canvas
//------------------------------------------------------------------------------
Canvas = class {
	__init__(cr:cairo.context) = {
		this.cr:public = cr
		//fontFamilyName = 'Monaco'
		fontFamilyName = 'Helvetica'
		//fontFamilyName = 'Geneva'
		this.cr.select_font_face(fontFamilyName,
								   cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
		this.cr.set_font_size(30.0)
	}
	SetLineWidth(border:symbol) = {
		width = if (border == `thin) {
			.1
		} elsif (border == `medium) {
			.5
		} else {
			1
		}
		this.cr.set_line_width(width)
	}
	GetWidthEm() = {
		this.cr.text_extents('m').width
	}
	CalcLength(n:number, unit:string) = {
		if (unit == 'em') {
			n * this.GetWidthEm()
		} else {
			n
		}
	}
	GetOffsetCenter() = {
		-this.cr.text_extents('0').y_bearing / 2
	}
	DrawBorder(x:number, y:number, width:number,
			   ascent:number, descent:number, border:symbol) = {
		this.cr.rectangle(x, y - ascent, width, ascent + descent)
		this.SetLineWidth(border)
		this.cr.stroke()
		Extent(width, ascent, descent)
	}
	DrawText(x:number, y:number, text:string, drawFlag:boolean => true) = {
		textExt = this.cr.text_extents(text)
		if (drawFlag) {
			this.cr.move_to(x, y)
			this.cr.show_text(text)
		}
		Extent(textExt.x_advance, -textExt.y_bearing, textExt.height + textExt.y_bearing)
	}
	DrawSymbol(x:number, y:number, text:string, drawFlag:boolean => true) = {
		text = ConvOperatorSymbol(text)
		textExt = this.cr.text_extents(text)
		offsetCenter = this.GetOffsetCenter()
		ascent = offsetCenter + textExt.height / 2
		descent = max(0, textExt.height - ascent)
		if (drawFlag) {
			fontExt = this.cr.font_extents()
			this.cr.move_to(x, y - offsetCenter - textExt.y_bearing - textExt.height / 2)
			this.cr.show_text(text)
		}
		Extent(textExt.x_advance, ascent, descent)
	}
	DrawItem(x:number, y:number, item, drawFlag:boolean => true) = {
		item.Draw(this, x, y, drawFlag)
	}
	DrawItems(x:number, y:number, items[], drawFlag:boolean => true) = {
		x0 = x
		ascent = descent = 0
		items.each {|item|
			ext = this.DrawItem(x, y, item, drawFlag)
			if (ascent < ext.ascent) {ascent = ext.ascent}
			if (descent < ext.descent) {descent = ext.descent}
			x += ext.x_advance
		}
		Extent(x - x0, ascent, descent)
	}
	CalcExtentItem(item) = this.DrawItem(0, 0, item, false)
	CalcExtentItems(items[]) = this.DrawItems(0, 0, items, false)
	Render(x:number, y:number, content:string) = this.DrawItem(x, y, Parse(content))
}

//------------------------------------------------------------------------------
// Item
//------------------------------------------------------------------------------
Item = class {
	public {type, text, children, width, widthUnit, height, heightUnit, align, border}
	__init__(type:symbol) = {
		// `Root, `Block, `Text, `Operator, `Bracket, `Rational, `Power
		this.type = type
		this.text = nil			// valid for `Text and `Operator
		this.children = []		// valid for `Root, `Block and `Rational
		this.width = nil		// valid for `Block
		this.widthUnit = nil	// valid for `Block
		this.height = nil		// valid for `Block
		this.heightUnit = nil	// valid for `Block
		this.align = nil		// valid for `Block
		this.border = nil		// valid for `Block
	}
	AddChild(item:Item) = this.children.add(item)
	GetLastChild() = if (!this.children.isempty()) {this.children.last()}
	EraseLastChild() = this.children.erase(-1)
	Draw(canvas, x:number, y:number, drawFlag:boolean => true) = {}
}

//------------------------------------------------------------------------------
// ItemRoot
//------------------------------------------------------------------------------
ItemRoot = class(Item) {
	__init__() = {|`Root|}
	Draw(canvas:Canvas, x:number, y:number, drawFlag:boolean => true) = {
		canvas.DrawItems(x, y, this.children, drawFlag)
	}
	Print(indentLevel:number => 0):void = {
		printf('%*s%s:\n', indentLevel * 2, '', this.type)
		this.children:*Print(indentLevel + 1)
	}
}

//------------------------------------------------------------------------------
// ItemBlock
//------------------------------------------------------------------------------
ItemBlock = class(Item) {
	__init__() = {|`Block|}
	Draw(canvas:Canvas, x:number, y:number, drawFlag:boolean => true) = {
		if (this.children.isempty()) {
			fontExt = canvas.cr.font_extents()
			ext = Extent(0, fontExt.ascent, 0)
		} else {
			ext = canvas.CalcExtentItems(this.children)
		}
		if (this.width) {
			width = canvas.CalcLength(this.width, this.widthUnit)
		} else {
			width = ext.x_advance
		}
		offsetContent = if (this.align == `left) {
			0
		} elsif (this.align == `right) {
			width - ext.x_advance
		} else {
			(width - ext.x_advance) / 2
		}
		canvas.DrawItems(x + offsetContent, y, this.children, drawFlag)
		if (this.border && drawFlag) {
			canvas.DrawBorder(x, y, width, ext.ascent, ext.descent, this.border)
		} else {
			Extent(width, ext.ascent, ext.descent)
		}
	}
	Print(indentLevel:number => 0):void = {
		printf('%*s%s:', indentLevel * 2, '', this.type)
		this.width && printf(' width=%f%s', this.width, this.widthUnit)
		this.height && printf(' height=%f%s', this.height, this.heightUnit)
		this.align && printf(' align=%s', this.align)
		this.border && printf(' border=%s', this.border)
		println()
		this.children:*Print(indentLevel + 1)
	}
}

//------------------------------------------------------------------------------
// ItemText
//------------------------------------------------------------------------------
ItemText = class(Item) {
	__init__(text:string) = {|`Text| this.text = text}
	Draw(canvas:Canvas, x:number, y:number, drawFlag:boolean => true) = {
		canvas.DrawText(x, y, this.text, drawFlag)
	}
	Print(indentLevel:number => 0):void = {
		printf('%*s%s: "%s"\n', indentLevel * 2, '', this.type, this.text)
	}
}

//------------------------------------------------------------------------------
// ItemOperator
//------------------------------------------------------------------------------
ItemOperator = class(Item) {
	__init__(text:string) = {|`Operator| this.text = text}
	Draw(canvas:Canvas, x:number, y:number, drawFlag:boolean => true) = {
		x0 = x
		widthEm = canvas.GetWidthEm()
		x += widthEm * .4
		ext = canvas.DrawSymbol(x, y, this.text, drawFlag)
		x += ext.x_advance
		x += widthEm * .4
		Extent(x - x0, ext.ascent, ext.descent)
	}
	Print(indentLevel:number => 0):void = {
		printf('%*s%s: "%s"\n', indentLevel * 2, '', this.type, ConvOperatorSymbol(this.text))
	}
}

//------------------------------------------------------------------------------
// ItemBracket
//------------------------------------------------------------------------------
ItemBracket = class(Item) {
	__init__() = {|`Bracket|}
	Draw(canvas:Canvas, x:number, y:number, drawFlag:boolean => true) = {
		x0 = x
		widthEm = canvas.GetWidthEm()
		extParenL = canvas.DrawSymbol(x, y, '(', drawFlag)
		x += extParenL.x_advance
		extBody = canvas.DrawItems(x, y, this.children, drawFlag)
		x += extBody.x_advance
		x += widthEm * .15
		extParenR = canvas.DrawSymbol(x, y, ')', drawFlag)
		x += extParenR.x_advance
		Extent(x - x0,
			   max(extParenL.ascent, extBody.ascent, extParenR.ascent),
			   max(extParenL.descent, extBody.descent, extParenR.descent))
	}
	Print(indentLevel:number => 0):void = {
		printf('%*s%s:\n', indentLevel * 2, '', this.type)
		this.children:*Print(indentLevel + 1)
	}
}

//------------------------------------------------------------------------------
// ItemRational
//------------------------------------------------------------------------------
ItemRational = class(Item) {
	__init__() = {|`Rational|}
	Draw(canvas:Canvas, x:number, y:number, drawFlag:boolean => true) = {
		itemNumer = this.children[0]
		itemDenom = this.children[1]
		widthEm = canvas.GetWidthEm()
		wdStick = widthEm * .5
		htMgn = widthEm * .2
		offsetCenter = canvas.GetOffsetCenter()
		yCenter = y - offsetCenter
		extNumer = canvas.CalcExtentItem(itemNumer)
		extDenom = canvas.CalcExtentItem(itemDenom)
		width = max(extNumer.x_advance, extDenom.x_advance) + wdStick * 2
		canvas.DrawItem(x + (width - extNumer.x_advance) / 2,
					   yCenter - htMgn - extNumer.descent, itemNumer, drawFlag)
		canvas.DrawItem(x + (width - extDenom.x_advance) / 2,
					   yCenter + htMgn + extDenom.ascent, itemDenom, drawFlag)
		canvas.cr.move_to(x, yCenter)
		canvas.cr.rel_line_to(width, 0)
		canvas.SetLineWidth(`medium)
		canvas.cr.stroke()
		Extent(width,
			   extNumer.ascent + extNumer.descent + htMgn + extDenom.ascent - offsetCenter,
			   extDenom.descent + offsetCenter + htMgn)
	}
	Print(indentLevel:number => 0):void = {
		printf('%*s%s:\n', indentLevel * 2, '', this.type)
		this.children:*Print(indentLevel + 1)
	}
}

//------------------------------------------------------------------------------
// ItemPower
//------------------------------------------------------------------------------
ItemPower = class(Item) {
	__init__() = {|`Power|}
	Draw(canvas:Canvas, x:number, y:number, drawFlag:boolean => true) = {
		itemBase = this.children[0]
		itemPower = this.children[1]
		x0 = x
		extBase = canvas.DrawItem(x, y, itemBase, drawFlag)
		x += extBase.x_advance
		canvas.cr.save {
			canvas.cr.set_font_size(20)
			extPower = canvas.DrawItem(x, y - extBase.ascent * .8, itemPower, drawFlag)
		}
		x += extPower.x_advance
		Extent(x - x0, 0, 0)
	}
	Print(indentLevel:number => 0):void = {
		printf('%*s%s:\n', indentLevel * 2, '', this.type)
		this.children:*Print(indentLevel + 1)
	}
}

ConvOperatorSymbol(text:string) = {
	if (text == '*') {'\u00d7'} elsif (text == '%') {'\u00f7'} else {text}
}

AddChildItem(itemStack[]:Item, item:Item):void = {
	itemParent = itemStack.last()
	itemParent.AddChild(item)
	if (itemParent.type in [`Rational, `Power] && itemParent.children.len() >= 2) {
		itemStack.erase(-1)
	}
}

Parse(content:string) = {
	itemStack = []
	itemStack.add(ItemRoot())
	text = ''
	stat = `Normal
	content.each {|ch|
		utils.pushback {|pb|
			if (stat == `Normal) {
				if (ch == '{') {
					item = ItemBlock()
					AddChildItem(itemStack, item)
					itemStack.add(item)
				} elsif (ch == '}') {
					itemParent = itemStack.last()
					if (!text.isempty()) {
						AddChildItem(itemStack, ItemText(text))
						itemParent = itemStack.last()
						text = ''
					}
					if (itemParent.type != `Block) {
						raise(error.SyntaxError, 'unbalanced bracket')
					}
					stat = `BlockAttrPre
				} elsif (ch == '(') {
					item = ItemBracket()
					AddChildItem(itemStack, item)
					itemStack.add(item)
				} elsif (ch == ')') {
					itemParent = itemStack.last()
					if (!text.isempty()) {
						AddChildItem(itemStack, ItemText(text))
						itemParent = itemStack.last()
						text = ''
					}
					if (itemParent.type != `Bracket) {
						raise(error.SyntacError, 'unbalanced bracket')
					}
					itemStack.erase(-1)
					text = ''
				} elsif (ch == '/') {
					itemParent = itemStack.last()
					if (!text.isempty()) {
						AddChildItem(itemStack, ItemText(text))
						itemParent = itemStack.last()
						text = ''
					}
					if (itemLast = itemParent.GetLastChild()) {
						itemParent.EraseLastChild()
						item = ItemRational()
						AddChildItem(itemStack, item)
						item.AddChild(itemLast)
						itemStack.add(item)
					}
				} elsif (ch == '^') {
					itemParent = itemStack.last()
					if (!text.isempty()) {
						AddChildItem(itemStack, ItemText(text))
						itemParent = itemStack.last()
						text = ''
					}
					if (itemLast = itemParent.GetLastChild()) {
						itemParent.EraseLastChild()
						item = ItemPower()
						AddChildItem(itemStack, item)
						item.AddChild(itemLast)
						itemStack.add(item)
					}
				} elsif (ch in ['+', '-', '*', '%', '=', '<', '>']) {
					if (!text.isempty()) {
						AddChildItem(itemStack, ItemText(text))
						text = ''
					}
					AddChildItem(itemStack, ItemOperator(ch))
				} elsif (ch in [' ', '\t']) {
					if (!text.isempty()) {
						AddChildItem(itemStack, ItemText(text))
						text = ''
					}
				} else {
					text += ch
				}
			} elsif (stat == `BlockAttrPre) {
				if (ch == '[') {
					stat = `BlockAttr
				} else {
					itemStack.erase(-1)
					pb.Pushback()
					stat = `Normal
				}
			} elsif (stat == `BlockAttr) {
			if (ch == ']') {
				itemParent = itemStack.last()
				text.split(',') {|field|
					field = field.strip()
					if (m = field.match(r'width=([\d\.]+)([a-z]+)')) {
						itemParent.width = m[1].tonumber()
						itemParent.widthUnit = m[2]
					} elsif (m = field.match(r'height=([\d\.]+)([a-z]+)')) {
						itemParent.height = m[1].tonumber()
						itemParent.heightUnit = m[2]
					} elsif (m = field.match(r'border=([a-z]+)')) {
						if (m[1] == 'thin') {
							itemParent.border = `thin
						} elsif (m[1] == 'medium') {
							itemParent.border = `medium
						} elsif (m[1] == 'thick') {
							itemParent.border = `thick
						}
					} elsif (field == 'border') {
						itemParent.border = `medium
					} elsif (field == 'center') {
						itemParent.align = `center
					} elsif (field == 'left') {
						itemParent.align = `left
					} elsif (field == 'right') {
						itemParent.align = `right
					} else {
						// invalid attribute
					}
				}
				itemStack.erase(-1)
				text = ''
				stat = `Normal
				} else {
					text += ch
				}
			}
		}
	}
	!text.isempty() && AddChildItem(itemStack, ItemText(text))
	itemStack.first()
}

DrawTextWithBBox(cr:cairo.context, x:number, y:number, str:string) = {
	xOff = 0
	str.each {|ch|
		textExt = cr.text_extents(ch)
		cr.rectangle(x + xOff + textExt.x_bearing, y + textExt.y_bearing,
					 textExt.width, textExt.height)
		xOff += textExt.x_advance
	}
	cr.set_source_rgba(0.8, 0.8, 0.8, 0.7)
	cr.fill()
	
	cr.move_to(x, y)
	cr.set_source_rgba(0.0, 0.0, 0.0, 1.0)
	cr.show_text(str)

	textExt = cr.text_extents(str)
	fontExt = cr.font_extents()
	scope {
		cr.move_to(x, y), cr.rel_line_to(textExt.x_advance, 0)
		cr.set_source_rgba(1.0, 0.2, 0.2, 1.0)
		cr.stroke()
	}
	scope {
		//cr.move_to(x, y + textExt.y_bearing), cr.rel_line_to(textExt.x_advance, 0)
		cr.move_to(x, y -  fontExt.ascent), cr.rel_line_to(textExt.x_advance, 0)
		cr.set_source_rgba(0.2, 1.0, 0.2, 1.0)
		cr.stroke()
	}
	scope {
		//cr.move_to(x, y + textExt.y_bearing + textExt.height), cr.rel_line_to(textExt.x_advance, 0)
		cr.move_to(x, y + fontExt.descent), cr.rel_line_to(textExt.x_advance, 0)
		cr.set_source_rgba(0.2, 0.2, 1.0, 1.0)
		cr.stroke()
	}
}

if (__name__ == '__main__') {
	//str = 'x^2+3x^3+4=0'
	//str = '{1000}[5em,center] + {123}[5em,center] = {}[5em,border=thin]'
	//str = '123+345-1111'
	str = '1 % 3 + {x + 3} % {3x + 2} + 1 % {2 % 3}'
	//str = '1 % {2 % 3}'
	//str = '{1 % 2} % {2 % 3}'
	Parse(str).Print()
}
