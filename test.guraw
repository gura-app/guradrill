#!/usr/bin/env gura
# encoding: utf-8
import(wx)
import(cairo)
import(Renderer)

App = class(wx.App) {
	OnInit() = {
		frame = FrameMain('Simple', wx.DefaultPosition, wx.Size(800, 600))
		frame.Show()
		true
	}
}

DrawTextWithBBox(cr:cairo.context, x:number, y:number, str:string) = {
	xOff = 0
	str.each {|ch|
		textExt = cr.text_extents(ch)
		cr.rectangle(x + xOff + textExt.x_bearing, y + textExt.y_bearing,
					 textExt.width, textExt.height)
		xOff += textExt.x_advance
	}
	cr.set_source_rgba(0.8, 0.8, 0.8, 0.7)
	cr.fill()
	
	cr.set_source_rgba(1.0, 0.8, 0.8, 1.0)
	fontExt = cr.font_extents()
	cr.rectangle(x, y, 100, -fontExt.ascent)
	cr.fill()
	
	cr.move_to(x, y)
	cr.set_source_rgba(0.0, 0.0, 0.0, 1.0)
	cr.show_text(str)
}

fontFamilyName = dict {
	`mswin => 'HGMaruGothicMPRO'
	`linux => 'VL Gothic'
	`darwin => 'Hiragino Maru Gothic Pro'
}[sys.platform]

PanelMain = class(wx.Panel) {
	__init__(parent:wx.Window) = {|parent, style => wx.BORDER_SUNKEN|
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event) }
		this.img = image(`rgba, 800, 600)
		this.img.cairo {|cr|
			//fontFamilyName = 'times'
			cr.select_font_face(fontFamilyName, cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
			cr.set_font_size(30.0)
			Renderer.Render(cr, 10, 100, '10 + 30 =')
			Renderer.Render(cr, 10, 150, '(10 + 30) * 5 / 2 - 7 =')
			Renderer.Render(cr, 10, 200, '{10}[3em] =')
			Renderer.Render(cr, 10, 250, '{10}[3em] + {20}[3em] = {}[3em,border]')
			Renderer.Render(cr, 10, 300, '{10}[3em,border] + {}[3em,border] = {}[3em,border]')
			Renderer.Render(cr, 10, 350, '3 % 5 + 2 % 3 =')
			//Renderer.Render(cr, 10, 350, '5x + 3 = 0 が成り立つとき、xの値をもとめよ。')
			//DrawTextWithBBox(cr, 10, 100, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')
			//DrawTextWithBBox(cr, 10, 180, 'abcdefghijklmnopqrstuvwxyz')
			//DrawTextWithBBox(cr, 10, 220, '0123456789')
			//DrawTextWithBBox(cr, 10, 260, '=+-\u00d7\u00f7\u03c0' + chr(0x0080..0x00ff).join())
			//DrawTextWithBBox(cr, 10, 300, '3.234 + 11234 \u00f7 (432 + 123) = ')
			// 3//4 + 2//3 =
			// [1000]{5c}+[123]{5c}=[]{5b}
		}
		this.bmp = wx.Bitmap(this.img)
	}
	OnPaint(event:wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		this.bmp && dc.DrawBitmap(this.bmp, 0, 0, false)
		dc = nil
	}
}

FrameMain = class(wx.Frame) {
	__init__(title:string, pos:wx.Point, size:wx.Size) = {|nil, wx.ID_ANY, title, pos, size|
		menuBar = wx.MenuBar()
		this.SetMenuBar(menuBar)
		PanelMain(this)
	}
}

wx.IMPLEMENT_APP(App)
