#!/usr/bin/env gura
# encoding: utf-8
import(wx)
import(cairo)
import(Renderer)

GenUniqRand(range+:number) {block} = {
	tbl = []
	i = 0
	repeat():xiter {
		xs = rand(range):map
		str = format('%d', xs).join(',')
		tbl.find(str) && continue
		tbl.add(str)
		!(rtn = block(xs*, i)) && continue
		i += 1
		rtn
	}
}

classref(`rational).display() = {
	if (this.denom == 1) {
		format('%d', this.numer)
	} elsif (this.numer > this.denom) {
		num = int(this.numer / this.denom)
		format('%d %d/%d', num, this.numer - num * this.denom, this.denom)
	} else {
		format('%d/%d', this.numer, this.denom)
	}
}

Question = struct(question:string, answer:string) {
	Compose(answerFlag:boolean) = {
		if (answerFlag) {
			this.question + r'{' + this.answer + '}[padding=2mm,border]'
		} else {
			this.question
		}
	}
}

QGenerator = class {
	Compose(n:number, answerFlag:boolean) = {
		this.Generate().head(n):*Compose(answerFlag)
	}
}

QGenerator_add_2digit_2digit = class(QGenerator) {
	Generate() = {
		GenUniqRand(90, 90) {|a, b|
			a += 10, b += 10
			Question(r'${a} + ${b} ='.embed(), '${a + b}'.embed())
		}
	}
}

QGenerator_sub_2digit_2digit = class(QGenerator) {
	Generate() = {
		GenUniqRand(90, 90) {|a, b|
			if (a <= b) { continue }
			a += 10, b += 10
			Question(r'${a} - ${b} ='.embed(), '${a - b}'.embed())
		}
	}
}

QGenerator_mul_2digit_2digit = class(QGenerator) {
	Generate() = {
		GenUniqRand(90, 90) {|a, b|
			a += 10, b += 10
			Question(r'${a} * ${b} ='.embed(), '${a * b}'.embed())
		}
	}
}

QGenerator_div_2digit_2digit = class(QGenerator) {
	Generate() = {
		GenUniqRand(90, 90) {|a, b|
			a += 10, b += 10
			Question(r'${a} % ${b} ='.embed(), '${a / b}'.embed())
		}
	}
}

QGenerator_mix3_2digit_2digit_2digit = class(QGenerator) {
	Generate() = {
		GenUniqRand(20, 20, 20) {|a, b, c|
			a += 1, b += 1, c += 1
			Question(r'${a} + ${b} * ${c} ='.embed(), '${a + b * c}'.embed())
		}
	}
}

QGenerator_frac_add_2digit@2digit_2digit@2digit = class(QGenerator) {
	Generate() = {
		GenUniqRand(9, 9, 9, 9) {|a, b, c, d|
			a += 1, b += 1, c += 1, d += 1
			if (a > b || c > d) {continue}
			x1 = rational(a, b).reduce()
			x2 = rational(c, d).reduce()
			if (x1.denom == 1 && x2.denom == 1) {continue}
			if ((x1.denom == 1 || x2.denom == 1) && rand() > .2) {continue}
			ans = x1 + x2
			Question(r'${x1.display()} + ${x2.display()} ='.embed(),
					 '${ans.display()}'.embed())
		}
	}
}

MakeEquation(a:number, b:number, c:number) = {
	equ = ''
	if (a == 1) {
		equ += 'x^2'
	} elsif (a == -1) {
		equ += '-x^2'
	} elsif (a != 0) {
		equ += format('%dx^2', a)
	}
	if (b == 1) {
		equ += '+x'
	} elsif (b == -1) {
		equ += '-x'
	} elsif (b != 0) {
		equ += format('%+dx', b)
	}
	equ += format('%+d', c)
	equ
}

QGenerator_quadequ_factorization = class(QGenerator) {
	Generate() = {
		GenUniqRand(18, 18) {|x1, x2|
			x1 = if (x1 < 9) {x1 - 9} else {x1 - 9 + 1}
			x2 = if (x2 < 9) {x2 - 9} else {x2 - 9 + 1}
			a = 1, b = -x1 - x2, c = x1 * x2
			question = MakeEquation(a, b, c) + ' = 0'
			if (x1 == x2) {
				answer = format('x = %d', x1)
			} else {
				answer = format('x = %d, %d', x1, x2)
			}
			Question(question, answer)
		}
	}
}

QGenerator_quadequ_formula = class(QGenerator) {
	Generate() = {
		GenUniqRand(5, 9, 9) {|a, b, c|
			a += 1, b += 1, c += 1
			question = MakeEquation(a, b, c) + ' = 0'
			answer = r'x = {${-b} \pm \sqrt{${b * b - 4 * a * c}}} / ${2 * a}'.embed()
			Question(question, answer)
		}
	}
}

MakePage() = {
	answerFlag = true
	//width = 170 - 8 - 3
	width = 85 - 8 - 3
	height = 20
	fmtQuestion = R'''
	{\small (%d)}[width=8mm,align=center]
	{}[width=3mm]
	{\large %s}[width=${width}mm,height=${height}mm]
	'''.embed()
	questions = format(fmtQuestion, 1.., [
		//QGenerator_add_2digit_2digit().Compose(3, answerFlag)
		//QGenerator_sub_2digit_2digit().Compose(3, answerFlag)
		//QGenerator_mul_2digit_2digit().Compose(3, answerFlag)
		//QGenerator_div_2digit_2digit().Compose(3, answerFlag)
		//QGenerator_mix3_2digit_2digit_2digit().Compose(3, answerFlag)
		QGenerator_frac_add_2digit@2digit_2digit@2digit().Compose(16, answerFlag)
		//QGenerator_quadequ_factorization().Compose(3, answerFlag)
		//QGenerator_quadequ_formula().Compose(3, answerFlag)
		].shuffle())
	R'''
	{
		{
			{}[width=30mm,height=20mm,border]
			{hello}[width=130mm,height=20mm,border]
		}[pack,width=170mm,height=20mm,border]
		{}[height=10mm]
		{${questions}}[pack,width=170mm,height=230mm]
	}[pack=vert,width=170mm,height=250mm,margin-top=20mm,margin-left=20mm]
	'''.embed()
}

App = class(wx.App) {
	OnInit() = {
		randseed(os.clock())
		frame = FrameMain('Simple', wx.DefaultPosition, wx.Size(1000, 750))
		frame.Show()
		true
	}
}

PanelQuestion = class(wx.Panel) {
	__init__(parent:wx.Window) = {|parent, style => wx.BORDER_SUNKEN|
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event) }
	}
	OnPaint(event:wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		this.bmp && dc.DrawBitmap(this.bmp, 0, 0, false)
		dc = nil
	}
	UpdatePage(textPage:string) = {
		canvas = Renderer.Canvas.CreateForPreview(Renderer.PaperSize@A4, .6)
		canvas.Render(textPage)
		this.bmp = wx.Bitmap(canvas.GetImage())
	}
}

PanelMain = class(wx.Panel) {
	__init__(parent:wx.Window) = {|parent, style => wx.BORDER_SUNKEN|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			outerBox.Add(hbox, wx.SizerFlags().Expand())
			wx.Button(this, wx.ID_ANY, 'New Question') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand())
				ctrl.Bind(wx.EVT_BUTTON) {|event|
					this.SetCursor(wx.StockCursor(wx.CURSOR_WAIT))
					this.textPage = MakePage()
					this.panelQuestion.UpdatePage(this.textPage)
					this.SetCursor(wx.StockCursor(wx.CURSOR_ARROW))
					this.panelQuestion.Refresh()
				}
			}
			wx.Button(this, wx.ID_ANY, 'PDF') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand())
				ctrl.Bind(wx.EVT_BUTTON) {|event|
					canvas = Renderer.Canvas.CreateForPDF(Renderer.PaperSize@A4, 'a.pdf')
					canvas.Render(this.textPage)
					canvas.Flush()
				}
			}
		}
		wx.StaticLine(this, wx.ID_ANY) {|ctrl|
			outerBox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.TOP, 2))
		}
		PanelQuestion(this) {|ctrl|
			outerBox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.TOP, 2))
			this.panelQuestion = ctrl
		}
		this.bmp = nil
		this.textPage = ''
		this.panelQuestion.UpdatePage('')
	}
}

FrameMain = class(wx.Frame) {
	__init__(title:string, pos:wx.Point, size:wx.Size) = {|nil, wx.ID_ANY, title, pos, size|
		menuBar = wx.MenuBar()
		this.SetMenuBar(menuBar)
		PanelMain(this)
	}
}

wx.IMPLEMENT_APP(App)
